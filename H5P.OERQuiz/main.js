/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _src_js_questionset_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./src/js/questionset.js */ \"./src/js/questionset.js\");\n/* harmony import */ var _src_js_questionset_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_src_js_questionset_js__WEBPACK_IMPORTED_MODULE_0__);\n\r\n\n\n//# sourceURL=webpack://oer-h5p-quiz/./index.ts?");

/***/ }),

/***/ "./src/js/questionset.js":
/*!*******************************!*\
  !*** ./src/js/questionset.js ***!
  \*******************************/
/***/ (() => {

eval("H5P = H5P || {};\n\n/**\n * Will render a Question with multiple choices for answers.\n *\n * Events provided:\n * - h5pQuestionSetFinished: Triggered when a question is finished. (User presses Finish-button)\n *\n * @param {Array} options\n * @param {int} contentId\n * @param {Object} contentData\n * @returns {H5P.GDLQuestionSet} Instance\n */\nH5P.OERQuiz = function (options, contentId, contentData) {\n  if (!(this instanceof H5P.OERQuiz)) {\n    return new H5P.OERQuiz(options, contentId, contentData);\n  }\n  H5P.EventDispatcher.call(this);\n  var $ = H5P.jQuery;\n  var self = this;\n  this.contentId = contentId;\n\n  var defaults = {\n    initialQuestion: 0,\n    progressType: 'dots',\n    passPercentage: 50,\n    questions: [],\n    introPage: {\n      showIntroPage: false,\n      title: '',\n      introduction: '',\n      startButtonText: 'Start'\n    },\n    texts: {\n      prevButton: 'Previous question',\n      nextButton: 'Next question',\n      finishButton: 'Finish',\n      textualProgress: 'Question: @current of @total questions',\n      jumpToQuestion: 'Question %d of %total',\n      questionLabel: 'Question',\n      readSpeakerProgress: 'Question @current of @total',\n      unansweredText: 'Unanswered',\n      answeredText: 'Answered',\n      currentQuestionText: 'Current question'\n    },\n    endGame: {\n      showResultPage: true,\n      noResultMessage: 'Finished',\n      message: 'Your result:',\n      oldFeedback: {\n        successGreeting: '',\n        successComment: '',\n        failGreeting: '',\n        failComment: ''\n      },\n      overallFeedback: [],\n      finishButtonText: 'Finish',\n      solutionButtonText: 'Show solution',\n      retryButtonText: 'Retry',\n      showAnimations: false,\n      skipButtonText: 'Skip video',\n      showSolutionButton: true,\n      showRetryButton: true,\n      successUrl: null,\n      failUrl: null,\n    },\n    override: {},\n    disableBackwardsNavigation: false\n  };\n  var params = $.extend(true, {}, defaults, options);\n  this.params = params;\n\n  var texttemplate =\n          '<% if (introPage.showIntroPage) { %>' +\n          '<div class=\"intro-page\">' +\n          '  <% if (introPage.title) { %>' +\n          '    <div class=\"title\"><span><%= introPage.title %></span></div>' +\n          '  <% } %>' +\n          '  <% if (introPage.introduction) { %>' +\n          '    <div class=\"introduction\"><%= introPage.introduction %></div>' +\n          '  <% } %>' +\n          '  <div class=\"buttons\"><a href=\"#\" class=\"qs-startbutton h5p-joubelui-button h5p-button\"><%= introPage.startButtonText %></a></div>' +\n          '</div>' +\n          '<% } %>' +\n          '<div tabindex=\"-1\" class=\"qs-progress-announcer\"></div>' +\n          '<div class=\"questionset<% if (introPage.showIntroPage) { %> hidden<% } %>\">' +\n          '  <% for (var i=0; i<questions.length; i++) { %>' +\n          '    <div class=\"question-container\"></div>' +\n          '  <% } %>' +\n          '  <div class=\"qs-footer\">' +\n          '    <div class=\"qs-progress\">' +\n          '      <% if (progressType == \"dots\") { %>' +\n          '        <ul class=\"dots-container\" role=\"navigation\">' +\n          '          <% for (var i=0; i<questions.length; i++) { %>' +\n          '           <li class=\"progress-item\">' +\n          '             <a href=\"#\" ' +\n          '               class=\"progress-dot unanswered<%' +\n          '               if (disableBackwardsNavigation) { %> disabled <% } %>\"' +\n          '               aria-label=\"<%=' +\n          '               texts.jumpToQuestion.replace(\"%d\", i + 1).replace(\"%total\", questions.length)' +\n          '               + \", \" + texts.unansweredText %>\" tabindex=\"-1\" ' +\n          '               <% if (disableBackwardsNavigation) { %> aria-disabled=\"true\" <% } %>' +\n          '             ></a>' +\n          '           </li>' +\n          '          <% } %>' +\n          '        </div>' +\n          '      <% } else if (progressType == \"textual\") { %>' +\n          '        <span class=\"progress-text\"></span>' +\n          '      <% } %>' +\n          '    </div>' +\n          '  </div>' +\n          '</div>';\n\n  var solutionButtonTemplate = params.endGame.showSolutionButton ?\n    '    <button type=\"button\" class=\"h5p-joubelui-button h5p-button qs-solutionbutton\"><%= solutionButtonText %></button>':\n    '';\n\n  const retryButtonTemplate = params.endGame.showRetryButton ?\n    '    <button type=\"button\" class=\"h5p-joubelui-button h5p-button qs-retrybutton\"><%= retryButtonText %></button>':\n    '';\n\n  var resulttemplate =\n          '<div class=\"questionset-results\">' +\n          '  <div class=\"greeting\"><%= message %></div>' +\n          '  <div class=\"feedback-section\">' +\n          '    <div class=\"feedback-scorebar\"></div>' +\n          '    <div class=\"feedback-text\"></div>' +\n          '  </div>' +\n          '  <% if (comment) { %>' +\n          '  <div class=\"result-header\"><%= comment %></div>' +\n          '  <% } %>' +\n          '  <% if (resulttext) { %>' +\n          '  <div class=\"result-text\"><%= resulttext %></div>' +\n          '  <% } %>' +\n          ' <% if (successUrl) { %>' +\n            '<a href=\"<%= successUrl.url %>\" target=\"_blank\" class=\"h5p-joubelui-button gdl-questionset__endlink--success\"><%= successUrl.linkLabel %></a>' +\n          ' <% } %>' +\n          ' <% if (failUrl) { %>' +\n            '<a href=\"<%= failUrl.url %>\" target=\"_blank\" class=\"h5p-joubelui-button gdl-questionset__endlink--fail\"><%= failUrl.linkLabel %></a>' +\n          ' <% } %>' +\n          '  <div class=\"buttons\">' +\n          solutionButtonTemplate +\n          retryButtonTemplate +\n          '  </div>' +\n          '</div>';\n\n  var template = new EJS({text: texttemplate});\n  var endTemplate = new EJS({text: resulttemplate});\n\n  var initialParams = $.extend(true, {}, defaults, options);\n  var poolOrder; // Order of questions in a pool\n  var currentQuestion = 0;\n  var questionInstances = [];\n  var questionOrder; //Stores order of questions to allow resuming of question set\n  var $myDom;\n  var scoreBar;\n  var up;\n  var renderSolutions = false;\n  var showingSolutions = false;\n  var autoProgressTimeout = false;\n  contentData = contentData || {};\n\n  // Bring question set up to date when resuming\n  if (contentData.previousState) {\n    if (contentData.previousState.progress) {\n      currentQuestion = contentData.previousState.progress;\n      // self.trigger('questionChanged', currentQuestion);\n    }\n    questionOrder = contentData.previousState.order;\n  }\n\n  /**\n   * Randomizes questions in an array and updates an array containing their order\n   * @param  {array} questions\n   * @return {Object.<array, array>} questionOrdering\n   */\n  var randomizeQuestionOrdering = function (questions) {\n\n    // Save the original order of the questions in a multidimensional array [[question0,0],[question1,1]...\n    var questionOrdering = questions.map(function (questionInstance, index) {\n      return [questionInstance, index];\n    });\n\n    // Shuffle the multidimensional array\n    questionOrdering = H5P.shuffleArray(questionOrdering);\n\n    // Retrieve question objects from the first index\n    questions = [];\n    for (var i = 0; i < questionOrdering.length; i++) {\n      questions[i] = questionOrdering[i][0];\n    }\n\n    // Retrieve the new shuffled order from the second index\n    var newOrder = [];\n    for (var j = 0; j < questionOrdering.length; j++) {\n\n      // Use a previous order if it exists\n      if (contentData.previousState && contentData.previousState.questionOrder) {\n        newOrder[j] = questionOrder[questionOrdering[j][1]];\n      }\n      else {\n        newOrder[j] = questionOrdering[j][1];\n      }\n    }\n\n    // Return the questions in their new order *with* their new indexes\n    return {\n      questions: questions,\n      questionOrder: newOrder\n    };\n  };\n\n  // Create a pool (a subset) of questions if necessary\n  if (params.poolSize > 0) {\n\n    // If a previous pool exists, recreate it\n    if (contentData.previousState && contentData.previousState.poolOrder) {\n      poolOrder = contentData.previousState.poolOrder;\n\n      // Recreate the pool from the saved data\n      var pool = [];\n      for (var i = 0; i < poolOrder.length; i++) {\n        pool[i] = params.questions[poolOrder[i]];\n      }\n\n      // Replace original questions with just the ones in the pool\n      params.questions = pool;\n    }\n    else { // Otherwise create a new pool\n      // Randomize and get the results\n      var poolResult = randomizeQuestionOrdering(params.questions);\n      var poolQuestions = poolResult.questions;\n      poolOrder = poolResult.questionOrder;\n\n      // Discard extra questions\n\n      poolQuestions = poolQuestions.slice(0, params.poolSize);\n      poolOrder = poolOrder.slice(0, params.poolSize);\n\n      // Replace original questions with just the ones in the pool\n      params.questions = poolQuestions;\n    }\n  }\n\n  // Create the html template for the question container\n  var $template = $(template.render(params));\n\n  // Set overrides for questions\n  var override;\n  if (params.override.showSolutionButton || params.override.retryButton || params.override.checkButton === false) {\n    override = {};\n    if (params.override.showSolutionButton) {\n      // Force \"Show solution\" button to be on or off for all interactions\n      override.enableSolutionsButton =\n          (params.override.showSolutionButton === 'on' ? true : false);\n    }\n\n    if (params.override.retryButton) {\n      // Force \"Retry\" button to be on or off for all interactions\n      override.enableRetry =\n          (params.override.retryButton === 'on' ? true : false);\n    }\n\n    if (params.override.checkButton === false) {\n      // Force \"Check\" button to be on or off for all interactions\n      override.enableCheckButton = params.override.checkButton;\n    }\n  }\n\n  /**\n   * Generates question instances from H5P objects\n   *\n   * @param  {object} questions H5P content types to be created as instances\n   * @return {array} Array of questions instances\n   */\n  var createQuestionInstancesFromQuestions = function (questions) {\n    var result = [];\n    // Create question instances from questions\n    // Instantiate question instances\n    for (var i = 0; i < questions.length; i++) {\n\n      var question;\n      // If a previous order exists, use it\n      if (questionOrder !== undefined) {\n        question = questions[questionOrder[i]];\n      }\n      else {\n        // Use a generic order when initialzing for the first time\n        question = questions[i];\n      }\n\n      if (override) {\n        // Extend subcontent with the overrided settings.\n        $.extend(question.params.behaviour, override);\n      }\n\n      question.params = question.params || {};\n      var hasAnswers = contentData.previousState && contentData.previousState.answers;\n      var questionInstance = H5P.newRunnable(question, contentId, undefined, undefined,\n        {\n          previousState: hasAnswers ? contentData.previousState.answers[i] : undefined,\n          parent: self\n        });\n      questionInstance.on('resize', function () {\n        up = true;\n        self.trigger('resize');\n      });\n      questionInstance.on('autoprogress', () => {\n        moveQuestion(1);\n      });\n      result.push(questionInstance);\n    }\n\n    return result;\n  };\n\n  // Create question instances from questions given by params\n  questionInstances = createQuestionInstancesFromQuestions(params.questions);\n\n  // Randomize questions only on instantiation\n  if (params.randomQuestions && contentData.previousState === undefined) {\n    var result = randomizeQuestionOrdering(questionInstances);\n    questionInstances = result.questions;\n    questionOrder = result.questionOrder;\n  }\n\n  // Resize all interactions on resize\n  self.on('resize', function () {\n    if (up) {\n      // Prevent resizing the question again.\n      up = false;\n      return;\n    }\n\n    for (var i = 0; i < questionInstances.length; i++) {\n      questionInstances[i].trigger('resize');\n    }\n  });\n\n  // Update button state.\n  var _updateButtons = function () {\n    // Verify that current question is answered when backward nav is disabled\n    if (params.disableBackwardsNavigation) {\n      if (questionInstances[currentQuestion].getAnswerGiven() &&\n          questionInstances.length-1 !== currentQuestion) {\n        questionInstances[currentQuestion].showButton('next');\n      }\n      else {\n        questionInstances[currentQuestion].hideButton('next');\n      }\n    }\n\n    var answered = true;\n    for (var i = questionInstances.length - 1; i >= 0; i--) {\n      answered = answered && (questionInstances[i]).getAnswerGiven();\n    }\n\n    if (currentQuestion === (params.questions.length - 1) &&\n        questionInstances[currentQuestion]) {\n      if (answered) {\n        questionInstances[currentQuestion].showButton('finish');\n      }\n      else {\n        questionInstances[currentQuestion].hideButton('finish');\n      }\n    }\n  };\n\n  var _stopQuestion = function (questionNumber) {\n    if (questionInstances[questionNumber]) {\n      pauseMedia(questionInstances[questionNumber]);\n    }\n  };\n\n  var _showQuestion = function (questionNumber, preventAnnouncement) {\n    // Sanitize input.\n    if (questionNumber < 0) {\n      questionNumber = 0;\n    }\n    if (questionNumber >= params.questions.length) {\n      questionNumber = params.questions.length - 1;\n    }\n\n    currentQuestion = questionNumber;\n    self.trigger('questionChanged', params.questions[questionNumber]);\n\n    handleAutoPlay(currentQuestion);\n\n    // Hide all questions\n    $('.question-container', $myDom).hide().eq(questionNumber).show();\n\n    if (questionInstances[questionNumber]) {\n      // Trigger resize on question in case the size of the QS has changed.\n      var instance = questionInstances[questionNumber];\n      instance.setActivityStarted();\n      if (instance.$ !== undefined) {\n        instance.trigger('resize');\n      }\n    }\n\n    // Update progress indicator\n    // Test if current has been answered.\n    if (params.progressType === 'textual') {\n      $('.progress-text', $myDom).text(params.texts.textualProgress.replace(\"@current\", questionNumber+1).replace(\"@total\", params.questions.length));\n    }\n    else {\n      // Set currentNess\n      var previousQuestion = $('.progress-dot.current', $myDom).parent().index();\n      if (previousQuestion >= 0) {\n        toggleCurrentDot(previousQuestion, false);\n        toggleAnsweredDot(previousQuestion, questionInstances[previousQuestion].getAnswerGiven());\n      }\n      toggleCurrentDot(questionNumber, true);\n    }\n\n    if (!preventAnnouncement) {\n      // Announce question number of total, must use timeout because of buttons logic\n      setTimeout(function () {\n        var humanizedProgress = params.texts.readSpeakerProgress\n          .replace('@current', (currentQuestion + 1).toString())\n          .replace('@total', questionInstances.length.toString());\n\n        $('.qs-progress-announcer', $myDom)\n          .html(humanizedProgress)\n          .show().focus();\n\n        if (instance && instance.readFeedback) {\n          instance.readFeedback();\n        }\n      }, 0);\n    }\n\n    // Remember where we are\n    _updateButtons();\n    self.trigger('resize');\n    return currentQuestion;\n  };\n\n  /**\n   * Handle autoplays, limit to one at a time\n   *\n   * @param {number} currentQuestionIndex\n   */\n  var handleAutoPlay = function (currentQuestionIndex) {\n    for (var i = 0; i < questionInstances.length; i++) {\n      questionInstances[i].pause();\n    }\n\n    var currentQuestion = params.questions[currentQuestionIndex];\n    // self.trigger('questionChanged', params.questions[currentQuestionIndex]);\n\n    var hasAutoPlay = currentQuestion &&\n        currentQuestion.params.media &&\n        currentQuestion.params.media.params &&\n        currentQuestion.params.media.params.playback &&\n        currentQuestion.params.media.params.playback.autoplay;\n\n    if (hasAutoPlay && typeof questionInstances[currentQuestionIndex].play === 'function') {\n      questionInstances[currentQuestionIndex].play();\n    }\n  };\n\n\n\n  /**\n   * Show solutions for subcontent, and hide subcontent buttons.\n   * Used for contracts with integrated content.\n   * @public\n   */\n  var showSolutions = function () {\n    showingSolutions = true;\n    for (var i = 0; i < questionInstances.length; i++) {\n\n      // Enable back and forth navigation in solution mode\n      toggleDotsNavigation(true);\n      if (i < questionInstances.length - 1) {\n        questionInstances[i].showButton('next');\n      }\n      if (i > 0) {\n        questionInstances[i].showButton('prev');\n      }\n\n      try {\n        // Do not read answers\n        questionInstances[i].toggleReadSpeaker(true);\n        questionInstances[i].showSolutions();\n        questionInstances[i].toggleReadSpeaker(false);\n      }\n      catch (error) {\n        H5P.error(\"subcontent does not contain a valid showSolutions function\");\n        H5P.error(error);\n      }\n    }\n  };\n\n  /**\n   * Toggles whether dots are enabled for navigation\n   */\n  var toggleDotsNavigation = function (enable) {\n    $('.progress-dot', $myDom).each(function () {\n      $(this).toggleClass('disabled', !enable);\n      $(this).attr('aria-disabled', enable ? 'false' : 'true');\n      // Remove tabindex\n      if (!enable) {\n        $(this).attr('tabindex', '-1');\n      }\n    });\n  };\n\n  /**\n   * Resets the task and every subcontent task.\n   * Used for contracts with integrated content.\n   * @public\n   */\n  var resetTask = function () {\n\n    // Clear previous state to ensure questions are created cleanly\n    contentData.previousState = [];\n\n    showingSolutions = false;\n\n    for (var i = 0; i < questionInstances.length; i++) {\n      try {\n        questionInstances[i].resetTask();\n\n        // Hide back and forth navigation in normal mode\n        if (params.disableBackwardsNavigation) {\n          toggleDotsNavigation(false);\n\n          // Check if first question is answered by default\n          if (i === 0 && questionInstances[i].getAnswerGiven()) {\n            questionInstances[i].showButton('next');\n          }\n          else {\n            questionInstances[i].hideButton('next');\n          }\n\n          questionInstances[i].hideButton('prev');\n        }\n      }\n      catch (error) {\n        H5P.error(\"subcontent does not contain a valid resetTask function\");\n        H5P.error(error);\n      }\n    }\n\n    // Hide finish button\n    questionInstances[questionInstances.length - 1].hideButton('finish');\n\n    // Mark all tasks as unanswered:\n    $('.progress-dot').each(function (idx) {\n      toggleAnsweredDot(idx, false);\n    });\n\n    //Force the last page to be reRendered\n    rendered = false;\n\n    if (params.poolSize > 0) {\n\n      // Make new pool from params.questions\n      // Randomize and get the results\n      var poolResult = randomizeQuestionOrdering(initialParams.questions);\n      var poolQuestions = poolResult.questions;\n      poolOrder = poolResult.questionOrder;\n\n      // Discard extra questions\n      poolQuestions = poolQuestions.slice(0, params.poolSize);\n      poolOrder = poolOrder.slice(0, params.poolSize);\n\n      // Replace original questions with just the ones in the pool\n      params.questions = poolQuestions;\n\n      // Recreate the question instances\n      questionInstances = createQuestionInstancesFromQuestions(params.questions);\n\n      // Update buttons\n      initializeQuestion();\n\n    }\n    else if (params.randomQuestions) {\n      randomizeQuestions();\n    }\n\n  };\n\n  var rendered = false;\n\n  this.reRender = function () {\n    rendered = false;\n  };\n\n  /**\n   * Randomizes question instances\n   */\n  var randomizeQuestions = function () {\n\n    var result = randomizeQuestionOrdering(questionInstances);\n    questionInstances = result.questions;\n    questionOrder = result.questionOrder;\n\n    replaceQuestionsInDOM(questionInstances);\n  };\n\n  /**\n   * Empty the DOM of all questions, attach new questions and update buttons\n   *\n   * @param  {type} questionInstances Array of questions to be attached to the DOM\n   */\n  var replaceQuestionsInDOM = function (questionInstances) {\n\n    // Find all question containers and detach questions from them\n    $('.question-container', $myDom).each(function () {\n      $(this).children().detach();\n    });\n\n    // Reattach questions and their buttons in the new order\n    for (var i = 0; i < questionInstances.length; i++) {\n\n      var question = questionInstances[i];\n\n      // Make sure styles are not being added twice\n      $('.question-container:eq(' + i + ')', $myDom).attr('class', 'question-container');\n\n      question.attach($('.question-container:eq(' + i + ')', $myDom));\n\n      //Show buttons if necessary\n      if (questionInstances[questionInstances.length -1] === question &&\n          question.hasButton('finish')) {\n        question.showButton('finish');\n      }\n\n      if (questionInstances[questionInstances.length -1] !== question &&\n          question.hasButton('next')) {\n        question.showButton('next');\n      }\n\n      if (questionInstances[0] !== question &&\n          question.hasButton('prev') &&\n          !params.disableBackwardsNavigation) {\n        question.showButton('prev');\n      }\n\n      // Hide relevant buttons since the order has changed\n      if (questionInstances[0] === question) {\n        question.hideButton('prev');\n      }\n\n      if (questionInstances[questionInstances.length-1] === question) {\n        question.hideButton('next');\n      }\n\n      if (questionInstances[questionInstances.length-1] !== question) {\n        question.hideButton('finish');\n      }\n    }\n  };\n\n  var moveQuestion = function (direction) {\n    if (params.disableBackwardsNavigation && !questionInstances[currentQuestion].getAnswerGiven()) {\n      questionInstances[currentQuestion].hideButton('next');\n      questionInstances[currentQuestion].hideButton('finish');\n      return;\n    }\n\n    _stopQuestion(currentQuestion);\n    if (currentQuestion + direction >= questionInstances.length) {\n      _displayEndGame();\n    }\n    else {\n      // Allow movement if backward navigation enabled or answer given\n      _showQuestion(currentQuestion + direction);\n    }\n  };\n\n  /**\n   * Toggle answered state of dot at given index\n   * @param {number} dotIndex Index of dot\n   * @param {boolean} isAnswered True if is answered, False if not answered\n   */\n  var toggleAnsweredDot = function (dotIndex, isAnswered) {\n    var $el = $('.progress-dot:eq(' + dotIndex +')', $myDom);\n\n    // Skip current button\n    if ($el.hasClass('current')) {\n      return;\n    }\n\n    // Ensure boolean\n    isAnswered = !!isAnswered;\n\n    var label = params.texts.jumpToQuestion\n      .replace('%d', (dotIndex + 1).toString())\n      .replace('%total', $('.progress-dot', $myDom).length) +\n      ', ' +\n      (isAnswered ? params.texts.answeredText : params.texts.unansweredText);\n\n    $el.toggleClass('unanswered', !isAnswered)\n      .toggleClass('answered', isAnswered)\n      .attr('aria-label', label);\n  };\n\n  /**\n   * Toggle current state of dot at given index\n   * @param dotIndex\n   * @param isCurrent\n   */\n  var toggleCurrentDot = function (dotIndex, isCurrent) {\n    var $el = $('.progress-dot:eq(' + dotIndex +')', $myDom);\n    var texts = params.texts;\n    var label = texts.jumpToQuestion\n      .replace('%d', (dotIndex + 1).toString())\n      .replace('%total', $('.progress-dot', $myDom).length);\n\n    if (!isCurrent) {\n      var isAnswered = $el.hasClass('answered');\n      label += ', ' + (isAnswered ? texts.answeredText : texts.unansweredText);\n    }\n    else {\n      label += ', ' + texts.currentQuestionText;\n    }\n\n    var disabledTabindex = params.disableBackwardsNavigation && !showingSolutions;\n    $el.toggleClass('current', isCurrent)\n      .attr('aria-label', label)\n      .attr('tabindex', isCurrent && !disabledTabindex ? 0 : -1);\n  };\n\n  var _displayEndGame = function () {\n    $('.progress-dot.current', $myDom).removeClass('current');\n    if (rendered) {\n      $myDom.children().hide().filter('.questionset-results').show();\n      self.trigger('resize');\n      return;\n    }\n    //Remove old score screen.\n    $myDom.children().hide().filter('.questionset-results').remove();\n    rendered = true;\n\n    // Get total score.\n    var finals = self.getScore();\n    var totals = self.getMaxScore();\n\n    var scoreString = H5P.Question.determineOverallFeedback(params.endGame.overallFeedback, finals / totals).replace('@score', finals).replace('@total', totals);\n    var success = ((100 * finals / totals) >= params.passPercentage);\n\n    /**\n     * Makes our buttons behave like other buttons.\n     *\n     * @private\n     * @param {string} classSelector\n     * @param {function} handler\n     */\n    var hookUpButton = function (classSelector, handler) {\n      $(classSelector, $myDom).click(handler).keypress(function (e) {\n        if (e.which === 32) {\n          handler();\n          e.preventDefault();\n        }\n      });\n    };\n\n    var displayResults = function () {\n      self.triggerXAPICompleted(self.getScore(), self.getMaxScore(), success);\n\n      var successFeedback = params.endGame.successFeedback || null;\n      var failFeedback = params.endGame.failFeedback || null;\n\n      var eparams = {\n        message: params.endGame.showResultPage ? params.endGame.message : params.endGame.noResultMessage,\n        comment: params.endGame.showResultPage ? (success ? params.endGame.oldFeedback.successGreeting : params.endGame.oldFeedback.failGreeting) : undefined,\n        resulttext: params.endGame.showResultPage ? (success ? params.endGame.oldFeedback.successComment : params.endGame.oldFeedback.failComment) : undefined,\n        successUrl: successFeedback.successType === 'successUrl' && success ? successFeedback.successUrl : null,\n        failUrl: failFeedback.failType === 'failUrl' && !success ? failFeedback.failUrl : null,\n        finishButtonText: params.endGame.finishButtonText,\n        solutionButtonText: params.endGame.solutionButtonText,\n        retryButtonText: params.endGame.retryButtonText\n      };\n\n      // Show result page.\n      $myDom.children().hide();\n      $myDom.append(endTemplate.render(eparams));\n\n      if (params.endGame.showResultPage) {\n        hookUpButton('.qs-solutionbutton', function () {\n          showSolutions();\n          $myDom.children().hide().filter('.questionset').show();\n          _showQuestion(params.initialQuestion);\n        });\n        hookUpButton('.qs-retrybutton', function () {\n          resetTask();\n          $myDom.children().hide();\n\n          var $intro = $('.intro-page', $myDom);\n          if ($intro.length) {\n            // Show intro\n            $('.intro-page', $myDom).show();\n            $('.qs-startbutton', $myDom).focus();\n          }\n          else {\n            // Show first question\n            $('.questionset', $myDom).show();\n            _showQuestion(params.initialQuestion);\n          }\n        });\n\n        if (scoreBar === undefined) {\n          scoreBar = H5P.JoubelUI.createScoreBar(totals);\n        }\n        scoreBar.appendTo($('.feedback-scorebar', $myDom));\n        $('.feedback-text', $myDom).html(scoreString);\n\n        // Announce that the question set is complete\n        setTimeout(function () {\n          $('.qs-progress-announcer', $myDom)\n            .html(eparams.message + '.' +\n                  scoreString + '.' +\n                  eparams.comment + '.' +\n                  eparams.resulttext)\n            .show().focus();\n          scoreBar.setMaxScore(totals);\n          scoreBar.setScore(finals);\n        }, 0);\n      }\n      else {\n        // Remove buttons and feedback section\n        $('.qs-solutionbutton, .qs-retrybutton, .feedback-section', $myDom).remove();\n      }\n\n      self.trigger('resize');\n    };\n\n    var successFeedback = params.endGame.successFeedback;\n    var failFeedback = params.endGame.failFeedback;\n    var videoData = successFeedback.successType === 'successVideo' && success ? successFeedback.successVideo : null;\n    videoData = !success && failFeedback.failType === 'failVideo' ? failFeedback.failVideo : videoData;\n    if (videoData) {\n      $myDom.children().hide();\n      var $videoContainer = $('<div class=\"video-container\"></div>').appendTo($myDom);\n\n      var video = new H5P.Video({\n        sources: videoData,\n        fitToWrapper: true,\n        controls: false,\n        autoplay: false\n      }, contentId);\n      video.on('stateChange', function (event) {\n        if (event.data === H5P.Video.ENDED) {\n          displayResults();\n          $videoContainer.hide();\n        }\n      });\n      video.attach($videoContainer);\n      // Resize on video loaded\n      video.on('loaded', function () {\n        self.trigger('resize');\n      });\n      video.play();\n\n      $('<a class=\"h5p-joubelui-button h5p-button skip\">' + 'Stop video' + '</a>').click(function () {\n        video.pause();\n        $videoContainer.hide();\n        displayResults();\n      }).appendTo($videoContainer);\n\n      return;\n    }\n\n    // Trigger finished event.\n    displayResults();\n    self.trigger('resize');\n  };\n\n  var registerImageLoadedListener = function (question) {\n    H5P.on(question, 'imageLoaded', function () {\n      self.trigger('resize');\n    });\n  };\n\n  /**\n   * Initialize a question and attach it to the DOM\n   *\n   */\n  function initializeQuestion() {\n    // Attach questions\n    for (var i = 0; i < questionInstances.length; i++) {\n      var question = questionInstances[i];\n\n      // Make sure styles are not being added twice\n      $('.question-container:eq(' + i + ')', $myDom).attr('class', 'question-container');\n\n      question.attach($('.question-container:eq(' + i + ')', $myDom));\n\n      // Listen for image resize\n      registerImageLoadedListener(question);\n\n      // Add finish button\n      question.addButton('finish', params.texts.finishButton,\n        moveQuestion.bind(this, 1), false);\n\n      // Add next button\n      question.addButton('next', '', moveQuestion.bind(this, 1),\n        !params.disableBackwardsNavigation || !!question.getAnswerGiven(), {\n          href: '#', // Use href since this is a navigation button\n          'aria-label': params.texts.nextButton\n        });\n\n      // Add previous button\n      question.addButton('prev', '', moveQuestion.bind(this, -1),\n        !(questionInstances[0] === question || params.disableBackwardsNavigation), {\n          href: '#', // Use href since this is a navigation button\n          'aria-label': params.texts.prevButton\n        });\n\n      // Hide next button if it is the last question\n      if (questionInstances[questionInstances.length -1] === question) {\n        question.hideButton('next');\n      }\n\n      question.on('xAPI', function (event) {\n        var shortVerb = event.getVerb();\n        if (shortVerb === 'interacted' ||\n          shortVerb === 'answered' ||\n          shortVerb === 'attempted') {\n          toggleAnsweredDot(currentQuestion,\n            questionInstances[currentQuestion].getAnswerGiven());\n          _updateButtons();\n        }\n        if (shortVerb === 'completed') {\n          // An activity within this activity is not allowed to send completed events\n          event.setVerb('answered');\n        }\n        if (event.data.statement.context.extensions === undefined) {\n          event.data.statement.context.extensions = {};\n        }\n        event.data.statement.context.extensions['http://id.tincanapi.com/extension/ending-point'] = currentQuestion + 1;\n      });\n\n      // Mark question if answered\n      toggleAnsweredDot(i, question.getAnswerGiven());\n    }\n  }\n\n  this.attach = function (target) {\n    if (this.isRoot()) {\n      this.setActivityStarted();\n    }\n    if (typeof(target) === \"string\") {\n      $myDom = $('#' + target);\n    }\n    else {\n      $myDom = $(target);\n    }\n\n    // Render own DOM into target.\n    $myDom.children().remove();\n    $myDom.append($template);\n\n    if (params.backgroundImage !== undefined) {\n      $myDom.css({\n        overflow: 'hidden',\n        background: '#fff url(\"' + H5P.getPath(params.backgroundImage.path, contentId) + '\") no-repeat 50% 50%',\n        backgroundSize: '100% auto'\n      });\n    }\n\n    if (params.introPage.backgroundImage !== undefined) {\n      var $intro = $myDom.find('.intro-page');\n      if ($intro.length) {\n        var bgImg = params.introPage.backgroundImage;\n        var bgImgRatio = (bgImg.height / bgImg.width);\n        $intro.css({\n          background: '#fff url(\"' + H5P.getPath(bgImg.path, contentId) + '\") no-repeat 50% 50%',\n          backgroundSize: 'auto 100%',\n          minHeight: bgImgRatio * +window.getComputedStyle($intro[0]).width.replace('px','')\n        });\n      }\n    }\n\n    initializeQuestion();\n\n    // Allow other libraries to add transitions after the questions have been inited\n    $('.questionset', $myDom).addClass('started');\n\n    $('.qs-startbutton', $myDom)\n      .click(function () {\n        $(this).parents('.intro-page').hide();\n        $('.questionset', $myDom).show();\n        self.trigger('quizStarted');\n        _showQuestion(params.initialQuestion);\n        event.preventDefault();\n      })\n      .keydown(function (event) {\n        switch (event.which) {\n          case 13: // Enter\n          case 32: // Space\n            $(this).parents('.intro-page').hide();\n            $('.questionset', $myDom).show();\n            _showQuestion(params.initialQuestion);\n            event.preventDefault();\n        }\n      });\n\n      // If autoprogress hide check button\n      if (params.autoProgression && params.autoProgression.enabled) {\n        $myDom.find('.h5p-question-check-answer').hide();\n      }\n    /**\n     * Triggers changing the current question.\n     *\n     * @private\n     * @param {Object} [event]\n     */\n    var handleProgressDotClick = function (event) {\n      // Disable dots when backward nav disabled\n      event.preventDefault();\n      if (params.disableBackwardsNavigation && !showingSolutions) {\n        return;\n      }\n      // moveQuestion.bind(this, 1);\n    };\n\n    // Set event listeners.\n    $('.progress-dot', $myDom).click(handleProgressDotClick).keydown(function (event) {\n      var $this = $(this);\n      switch (event.which) {\n        case 13: // Enter\n        case 32: // Space\n          handleProgressDotClick.call(this, event);\n          break;\n\n        case 37: // Left Arrow\n        case 38: // Up Arrow\n          // Go to previous dot\n          var $prev = $this.parent().prev();\n          if ($prev.length) {\n            $prev.children('a').attr('tabindex', '0').focus();\n            $this.attr('tabindex', '-1');\n          }\n          break;\n\n        case 39: // Right Arrow\n        case 40: // Down Arrow\n          // Go to next dot\n          var $next = $this.parent().next();\n          if ($next.length) {\n            $next.children('a').attr('tabindex', '0').focus();\n            $this.attr('tabindex', '-1');\n          }\n          break;\n      }\n    });\n\n\n\n    // Hide all but current question\n    _showQuestion(currentQuestion, true);\n\n    if (renderSolutions) {\n      showSolutions();\n    }\n    // Update buttons in case they have changed (restored user state)\n    _updateButtons();\n\n    this.trigger('resize');\n\n    return this;\n  };\n\n  this.getQuizConfig = function() {\n    return this.params;\n  };\n\n  // Get current score for questionset.\n  this.getScore = function () {\n    var score = 0;\n    for (var i = questionInstances.length - 1; i >= 0; i--) {\n      score += questionInstances[i].getScore();\n    }\n    return score;\n  };\n\n  // Get total score possible for questionset.\n  this.getMaxScore = function () {\n    var score = 0;\n    for (var i = questionInstances.length - 1; i >= 0; i--) {\n      score += questionInstances[i].getMaxScore();\n    }\n    return score;\n  };\n\n  /**\n   * @deprecated since version 1.9.2\n   * @returns {number}\n   */\n  this.totalScore = function () {\n    return this.getMaxScore();\n  };\n\n  /**\n   * Gather copyright information for the current content.\n   *\n   * @returns {H5P.ContentCopyrights}\n   */\n  this.getCopyrights = function () {\n    var info = new H5P.ContentCopyrights();\n\n    // IntroPage Background\n    if (params.introPage !== undefined && params.introPage.backgroundImage !== undefined && params.introPage.backgroundImage.copyright !== undefined) {\n      var introBackground = new H5P.MediaCopyright(params.introPage.backgroundImage.copyright);\n      introBackground.setThumbnail(new H5P.Thumbnail(H5P.getPath(params.introPage.backgroundImage.path, contentId), params.introPage.backgroundImage.width, params.introPage.backgroundImage.height));\n      info.addMedia(introBackground);\n    }\n\n    // Background\n    if (params.backgroundImage !== undefined && params.backgroundImage.copyright !== undefined) {\n      var background = new H5P.MediaCopyright(params.backgroundImage.copyright);\n      background.setThumbnail(new H5P.Thumbnail(H5P.getPath(params.backgroundImage.path, contentId), params.backgroundImage.width, params.backgroundImage.height));\n      info.addMedia(background);\n    }\n\n    // Questions\n    var questionCopyrights;\n    for (var i = 0; i < questionInstances.length; i++) {\n      var instance = questionInstances[i];\n      var instanceParams = params.questions[i].params;\n\n      questionCopyrights = undefined;\n\n      if (instance.getCopyrights !== undefined) {\n        // Use the instance's own copyright generator\n        questionCopyrights = instance.getCopyrights();\n      }\n      if (questionCopyrights === undefined) {\n        // Create a generic flat copyright list\n        questionCopyrights = new H5P.ContentCopyrights();\n        H5P.findCopyrights(questionCopyrights, instanceParams.params, contentId,{\n          metadata: instanceParams.metadata,\n          machineName: instanceParams.library.split(' ')[0]\n        });\n      }\n\n      // Determine label\n      var label = (params.texts.questionLabel + ' ' + (i + 1));\n      if (instanceParams.params.contentName !== undefined) {\n        label += ': ' + instanceParams.params.contentName;\n      }\n      else if (instance.getTitle !== undefined) {\n        label += ': ' + instance.getTitle();\n      }\n      questionCopyrights.setLabel(label);\n\n      // Add info\n      info.addContent(questionCopyrights);\n    }\n\n    // Success video\n    var video;\n    if (params.endGame.successVideo !== undefined && params.endGame.successVideo.length > 0) {\n      video = params.endGame.successVideo[0];\n      if (video.copyright !== undefined) {\n        info.addMedia(new H5P.MediaCopyright(video.copyright));\n      }\n    }\n\n    // Fail video\n    if (params.endGame.failVideo !== undefined && params.endGame.failVideo.length > 0) {\n      video = params.endGame.failVideo[0];\n      if (video.copyright !== undefined) {\n        info.addMedia(new H5P.MediaCopyright(video.copyright));\n      }\n    }\n\n    return info;\n  };\n  this.getQuestions = function () {\n    return questionInstances;\n  };\n  this.showSolutions = function () {\n    renderSolutions = true;\n  };\n\n  /**\n   * Stop the given element's playback if any.\n   *\n   * @param {object} instance\n   */\n  var pauseMedia = function (instance) {\n    try {\n      if (instance.pause !== undefined &&\n        (instance.pause instanceof Function ||\n        typeof instance.pause === 'function')) {\n        instance.pause();\n      }\n    }\n    catch (err) {\n      // Prevent crashing, log error.\n      H5P.error(err);\n    }\n  };\n\n  /**\n   * Returns the complete state of question set and sub-content\n   *\n   * @returns {Object} current state\n   */\n  this.getCurrentState = function () {\n    return {\n      progress: showingSolutions ? questionInstances.length - 1 : currentQuestion,\n      answers: questionInstances.map(function (qi) {\n        return qi.getCurrentState();\n      }),\n      order: questionOrder,\n      poolOrder: poolOrder\n    };\n  };\n\n  /**\n   * Generate xAPI object definition used in xAPI statements.\n   * @return {Object}\n   */\n  var getxAPIDefinition = function () {\n    var definition = {};\n\n    definition.interactionType = 'compound';\n    definition.type = 'http://adlnet.gov/expapi/activities/cmi.interaction';\n    definition.description = {\n      'en-US': ''\n    };\n\n    return definition;\n  };\n\n  /**\n   * Add the question itself to the definition part of an xAPIEvent\n   */\n  var addQuestionToXAPI = function (xAPIEvent) {\n    var definition = xAPIEvent.getVerifiedStatementValue(['object', 'definition']);\n    $.extend(definition, getxAPIDefinition());\n  };\n\n  /**\n   * Get xAPI data from sub content types\n   *\n   * @param {Object} metaContentType\n   * @returns {array}\n   */\n  var getXAPIDataFromChildren = function (metaContentType) {\n    return metaContentType.getQuestions().map(function (question) {\n      return question.getXAPIData();\n    });\n  };\n\n  /**\n   * Get xAPI data.\n   * Contract used by report rendering engine.\n   *\n   * @see contract at {@link https://h5p.org/documentation/developers/contracts#guides-header-6}\n   */\n  this.getXAPIData = function () {\n    var xAPIEvent = this.createXAPIEventTemplate('answered');\n    addQuestionToXAPI(xAPIEvent);\n    xAPIEvent.setScoredResult(this.getScore(),\n      this.getMaxScore(),\n      this,\n      true,\n      this.getScore() === this.getMaxScore()\n    );\n    return {\n      statement: xAPIEvent.data.statement,\n      children: getXAPIDataFromChildren(this)\n    };\n  };\n};\n\nH5P.OERQuiz.prototype = Object.create(H5P.EventDispatcher.prototype);\nH5P.OERQuiz.prototype.constructor = H5P.OERQuiz;\n\n\n//# sourceURL=webpack://oer-h5p-quiz/./src/js/questionset.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.ts");
/******/ 	
/******/ })()
;